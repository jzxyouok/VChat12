package com.vince.vchat12.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.vince.vchat12.data.Friends;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIENDS".
*/
public class FriendsDao extends AbstractDao<Friends, Long> {

    public static final String TABLENAME = "FRIENDS";

    /**
     * Properties of entity Friends.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Create_time = new Property(1, java.util.Date.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(2, java.util.Date.class, "update_time", false, "UPDATE_TIME");
        public final static Property Contacts_web_id = new Property(3, String.class, "contacts_web_id", false, "CONTACTS_WEB_ID");
        public final static Property Target_user_web_id = new Property(4, String.class, "target_user_web_id", false, "TARGET_USER_WEB_ID");
        public final static Property Sys_group_type = new Property(5, Integer.class, "sys_group_type", false, "SYS_GROUP_TYPE");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property Nick = new Property(7, String.class, "nick", false, "NICK");
        public final static Property Avatar = new Property(8, String.class, "avatar", false, "AVATAR");
        public final static Property First_letter = new Property(9, String.class, "first_letter", false, "FIRST_LETTER");
        public final static Property Friends_group = new Property(10, long.class, "friends_group", false, "FRIENDS_GROUP");
        public final static Property LocalMsg_groupReceiver = new Property(11, long.class, "localMsg_groupReceiver", false, "LOCAL_MSG_GROUP_RECEIVER");
        public final static Property Dialogues_groupReceiver = new Property(12, long.class, "dialogues_groupReceiver", false, "DIALOGUES_GROUP_RECEIVER");
    };

    private DaoSession daoSession;

    private Query<Friends> localMsg_O2m_localMsg_groupReceiverQuery;
    private Query<Friends> dialogues_O2m_dialogues_groupReceiverQuery;

    public FriendsDao(DaoConfig config) {
        super(config);
    }
    
    public FriendsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIENDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: create_time
                "\"UPDATE_TIME\" INTEGER," + // 2: update_time
                "\"CONTACTS_WEB_ID\" TEXT," + // 3: contacts_web_id
                "\"TARGET_USER_WEB_ID\" TEXT," + // 4: target_user_web_id
                "\"SYS_GROUP_TYPE\" INTEGER," + // 5: sys_group_type
                "\"REMARK\" TEXT," + // 6: remark
                "\"NICK\" TEXT," + // 7: nick
                "\"AVATAR\" TEXT," + // 8: avatar
                "\"FIRST_LETTER\" TEXT," + // 9: first_letter
                "\"FRIENDS_GROUP\" INTEGER NOT NULL ," + // 10: friends_group
                "\"LOCAL_MSG_GROUP_RECEIVER\" INTEGER NOT NULL ," + // 11: localMsg_groupReceiver
                "\"DIALOGUES_GROUP_RECEIVER\" INTEGER NOT NULL );"); // 12: dialogues_groupReceiver
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIENDS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Friends entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(2, create_time.getTime());
        }
 
        java.util.Date update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(3, update_time.getTime());
        }
 
        String contacts_web_id = entity.getContacts_web_id();
        if (contacts_web_id != null) {
            stmt.bindString(4, contacts_web_id);
        }
 
        String target_user_web_id = entity.getTarget_user_web_id();
        if (target_user_web_id != null) {
            stmt.bindString(5, target_user_web_id);
        }
 
        Integer sys_group_type = entity.getSys_group_type();
        if (sys_group_type != null) {
            stmt.bindLong(6, sys_group_type);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(8, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(9, avatar);
        }
 
        String first_letter = entity.getFirst_letter();
        if (first_letter != null) {
            stmt.bindString(10, first_letter);
        }
        stmt.bindLong(11, entity.getFriends_group());
    }

    @Override
    protected void attachEntity(Friends entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Friends readEntity(Cursor cursor, int offset) {
        Friends entity = new Friends( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // create_time
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // update_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contacts_web_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // target_user_web_id
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sys_group_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nick
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // avatar
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // first_letter
            cursor.getLong(offset + 10) // friends_group
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Friends entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreate_time(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUpdate_time(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setContacts_web_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTarget_user_web_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSys_group_type(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNick(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAvatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFirst_letter(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFriends_group(cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Friends entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Friends entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "o2m_localMsg_groupReceiver" to-many relationship of LocalMsg. */
    public List<Friends> _queryLocalMsg_O2m_localMsg_groupReceiver(long localMsg_groupReceiver) {
        synchronized (this) {
            if (localMsg_O2m_localMsg_groupReceiverQuery == null) {
                QueryBuilder<Friends> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LocalMsg_groupReceiver.eq(null));
                localMsg_O2m_localMsg_groupReceiverQuery = queryBuilder.build();
            }
        }
        Query<Friends> query = localMsg_O2m_localMsg_groupReceiverQuery.forCurrentThread();
        query.setParameter(0, localMsg_groupReceiver);
        return query.list();
    }

    /** Internal query to resolve the "o2m_dialogues_groupReceiver" to-many relationship of Dialogues. */
    public List<Friends> _queryDialogues_O2m_dialogues_groupReceiver(long dialogues_groupReceiver) {
        synchronized (this) {
            if (dialogues_O2m_dialogues_groupReceiverQuery == null) {
                QueryBuilder<Friends> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Dialogues_groupReceiver.eq(null));
                dialogues_O2m_dialogues_groupReceiverQuery = queryBuilder.build();
            }
        }
        Query<Friends> query = dialogues_O2m_dialogues_groupReceiverQuery.forCurrentThread();
        query.setParameter(0, dialogues_groupReceiver);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGroupDao().getAllColumns());
            builder.append(" FROM FRIENDS T");
            builder.append(" LEFT JOIN GROUP T0 ON T.\"FRIENDS_GROUP\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Friends loadCurrentDeep(Cursor cursor, boolean lock) {
        Friends entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Group o2o_friends_group = loadCurrentOther(daoSession.getGroupDao(), cursor, offset);
         if(o2o_friends_group != null) {
            entity.setO2o_friends_group(o2o_friends_group);
        }

        return entity;    
    }

    public Friends loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Friends> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Friends> list = new ArrayList<Friends>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Friends> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Friends> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
