package com.vince.vchat12.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.vince.vchat12.data.Dialogues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIALOGUES".
*/
public class DialoguesDao extends AbstractDao<Dialogues, Long> {

    public static final String TABLENAME = "DIALOGUES";

    /**
     * Properties of entity Dialogues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Create_time = new Property(1, java.util.Date.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(2, java.util.Date.class, "update_time", false, "UPDATE_TIME");
        public final static Property IsGroupChat = new Property(3, Boolean.class, "isGroupChat", false, "IS_GROUP_CHAT");
        public final static Property Last_msg_content = new Property(4, String.class, "last_msg_content", false, "LAST_MSG_CONTENT");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property Nick = new Property(6, String.class, "nick", false, "NICK");
        public final static Property Avatar = new Property(7, String.class, "avatar", false, "AVATAR");
        public final static Property Dialogues_friend = new Property(8, long.class, "dialogues_friend", false, "DIALOGUES_FRIEND");
        public final static Property Dialogues_groupReceiver = new Property(9, long.class, "dialogues_groupReceiver", false, "DIALOGUES_GROUP_RECEIVER");
        public final static Property Dialogues_msg_list = new Property(10, long.class, "dialogues_msg_list", false, "DIALOGUES_MSG_LIST");
    };

    private DaoSession daoSession;


    public DialoguesDao(DaoConfig config) {
        super(config);
    }
    
    public DialoguesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIALOGUES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: create_time
                "\"UPDATE_TIME\" INTEGER," + // 2: update_time
                "\"IS_GROUP_CHAT\" INTEGER," + // 3: isGroupChat
                "\"LAST_MSG_CONTENT\" TEXT," + // 4: last_msg_content
                "\"REMARK\" TEXT," + // 5: remark
                "\"NICK\" TEXT," + // 6: nick
                "\"AVATAR\" TEXT," + // 7: avatar
                "\"DIALOGUES_FRIEND\" INTEGER NOT NULL ," + // 8: dialogues_friend
                "\"DIALOGUES_GROUP_RECEIVER\" INTEGER NOT NULL ," + // 9: dialogues_groupReceiver
                "\"DIALOGUES_MSG_LIST\" INTEGER NOT NULL );"); // 10: dialogues_msg_list
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIALOGUES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Dialogues entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(2, create_time.getTime());
        }
 
        java.util.Date update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(3, update_time.getTime());
        }
 
        Boolean isGroupChat = entity.getIsGroupChat();
        if (isGroupChat != null) {
            stmt.bindLong(4, isGroupChat ? 1L: 0L);
        }
 
        String last_msg_content = entity.getLast_msg_content();
        if (last_msg_content != null) {
            stmt.bindString(5, last_msg_content);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(7, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
        stmt.bindLong(9, entity.getDialogues_friend());
        stmt.bindLong(10, entity.getDialogues_groupReceiver());
        stmt.bindLong(11, entity.getDialogues_msg_list());
    }

    @Override
    protected void attachEntity(Dialogues entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Dialogues readEntity(Cursor cursor, int offset) {
        Dialogues entity = new Dialogues( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // create_time
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // update_time
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isGroupChat
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // last_msg_content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nick
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar
            cursor.getLong(offset + 8), // dialogues_friend
            cursor.getLong(offset + 9), // dialogues_groupReceiver
            cursor.getLong(offset + 10) // dialogues_msg_list
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dialogues entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreate_time(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUpdate_time(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setIsGroupChat(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setLast_msg_content(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNick(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDialogues_friend(cursor.getLong(offset + 8));
        entity.setDialogues_groupReceiver(cursor.getLong(offset + 9));
        entity.setDialogues_msg_list(cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Dialogues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Dialogues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFriendsDao().getAllColumns());
            builder.append(" FROM DIALOGUES T");
            builder.append(" LEFT JOIN FRIENDS T0 ON T.\"DIALOGUES_FRIEND\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Dialogues loadCurrentDeep(Cursor cursor, boolean lock) {
        Dialogues entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Friends o2o_dialogues_friend = loadCurrentOther(daoSession.getFriendsDao(), cursor, offset);
         if(o2o_dialogues_friend != null) {
            entity.setO2o_dialogues_friend(o2o_dialogues_friend);
        }

        return entity;    
    }

    public Dialogues loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Dialogues> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Dialogues> list = new ArrayList<Dialogues>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Dialogues> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Dialogues> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
