package com.vince.vchat12.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.vince.vchat12.data.LocalMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_MSG".
*/
public class LocalMsgDao extends AbstractDao<LocalMsg, Long> {

    public static final String TABLENAME = "LOCAL_MSG";

    /**
     * Properties of entity LocalMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Create_time = new Property(1, java.util.Date.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(2, java.util.Date.class, "update_time", false, "UPDATE_TIME");
        public final static Property Msg_web_id = new Property(3, String.class, "msg_web_id", false, "MSG_WEB_ID");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Attachment = new Property(7, String.class, "attachment", false, "ATTACHMENT");
        public final static Property IsGroupChat = new Property(8, Boolean.class, "isGroupChat", false, "IS_GROUP_CHAT");
        public final static Property LocalMsg_sender = new Property(9, long.class, "localMsg_sender", false, "LOCAL_MSG_SENDER");
        public final static Property LocalMsg_receiver = new Property(10, long.class, "localMsg_receiver", false, "LOCAL_MSG_RECEIVER");
        public final static Property LocalMsg_groupReceiver = new Property(11, long.class, "localMsg_groupReceiver", false, "LOCAL_MSG_GROUP_RECEIVER");
        public final static Property Dialogues_msg_list = new Property(12, long.class, "dialogues_msg_list", false, "DIALOGUES_MSG_LIST");
    };

    private DaoSession daoSession;

    private Query<LocalMsg> dialogues_O2m_dialogues_msg_listQuery;

    public LocalMsgDao(DaoConfig config) {
        super(config);
    }
    
    public LocalMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: create_time
                "\"UPDATE_TIME\" INTEGER," + // 2: update_time
                "\"MSG_WEB_ID\" TEXT," + // 3: msg_web_id
                "\"TYPE\" INTEGER," + // 4: type
                "\"STATUS\" INTEGER," + // 5: status
                "\"CONTENT\" TEXT," + // 6: content
                "\"ATTACHMENT\" TEXT," + // 7: attachment
                "\"IS_GROUP_CHAT\" INTEGER," + // 8: isGroupChat
                "\"LOCAL_MSG_SENDER\" INTEGER NOT NULL ," + // 9: localMsg_sender
                "\"LOCAL_MSG_RECEIVER\" INTEGER NOT NULL ," + // 10: localMsg_receiver
                "\"LOCAL_MSG_GROUP_RECEIVER\" INTEGER NOT NULL ," + // 11: localMsg_groupReceiver
                "\"DIALOGUES_MSG_LIST\" INTEGER NOT NULL );"); // 12: dialogues_msg_list
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_MSG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(2, create_time.getTime());
        }
 
        java.util.Date update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(3, update_time.getTime());
        }
 
        String msg_web_id = entity.getMsg_web_id();
        if (msg_web_id != null) {
            stmt.bindString(4, msg_web_id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String attachment = entity.getAttachment();
        if (attachment != null) {
            stmt.bindString(8, attachment);
        }
 
        Boolean isGroupChat = entity.getIsGroupChat();
        if (isGroupChat != null) {
            stmt.bindLong(9, isGroupChat ? 1L: 0L);
        }
        stmt.bindLong(10, entity.getLocalMsg_sender());
        stmt.bindLong(11, entity.getLocalMsg_receiver());
        stmt.bindLong(12, entity.getLocalMsg_groupReceiver());
    }

    @Override
    protected void attachEntity(LocalMsg entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocalMsg readEntity(Cursor cursor, int offset) {
        LocalMsg entity = new LocalMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // create_time
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // update_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg_web_id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // attachment
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isGroupChat
            cursor.getLong(offset + 9), // localMsg_sender
            cursor.getLong(offset + 10), // localMsg_receiver
            cursor.getLong(offset + 11) // localMsg_groupReceiver
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreate_time(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUpdate_time(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setMsg_web_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAttachment(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsGroupChat(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setLocalMsg_sender(cursor.getLong(offset + 9));
        entity.setLocalMsg_receiver(cursor.getLong(offset + 10));
        entity.setLocalMsg_groupReceiver(cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LocalMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LocalMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "o2m_dialogues_msg_list" to-many relationship of Dialogues. */
    public List<LocalMsg> _queryDialogues_O2m_dialogues_msg_list(long dialogues_msg_list) {
        synchronized (this) {
            if (dialogues_O2m_dialogues_msg_listQuery == null) {
                QueryBuilder<LocalMsg> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Dialogues_msg_list.eq(null));
                dialogues_O2m_dialogues_msg_listQuery = queryBuilder.build();
            }
        }
        Query<LocalMsg> query = dialogues_O2m_dialogues_msg_listQuery.forCurrentThread();
        query.setParameter(0, dialogues_msg_list);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFriendsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFriendsDao().getAllColumns());
            builder.append(" FROM LOCAL_MSG T");
            builder.append(" LEFT JOIN FRIENDS T0 ON T.\"LOCAL_MSG_SENDER\"=T0.\"_id\"");
            builder.append(" LEFT JOIN FRIENDS T1 ON T.\"LOCAL_MSG_RECEIVER\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LocalMsg loadCurrentDeep(Cursor cursor, boolean lock) {
        LocalMsg entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Friends o2o_localMsg_sender = loadCurrentOther(daoSession.getFriendsDao(), cursor, offset);
         if(o2o_localMsg_sender != null) {
            entity.setO2o_localMsg_sender(o2o_localMsg_sender);
        }
        offset += daoSession.getFriendsDao().getAllColumns().length;

        Friends o2o_localMsg_receiver = loadCurrentOther(daoSession.getFriendsDao(), cursor, offset);
         if(o2o_localMsg_receiver != null) {
            entity.setO2o_localMsg_receiver(o2o_localMsg_receiver);
        }

        return entity;    
    }

    public LocalMsg loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LocalMsg> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LocalMsg> list = new ArrayList<LocalMsg>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LocalMsg> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LocalMsg> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
